"启动时最大化
if has("win32")
	au GUIEnter * simalt ~x
endif

set nobackup
set nocompatible
set laststatus=2
"set t_Co=256
filetype off
"set rtp+=~/.vim/bundle/Vundle.vim
"call vundle#begin()
set rtp+=D:/tools/program/gvim/Vim/vimfiles/bundle/Vundle.vim/
call vundle#begin('D:/tools/program/gvim/Vim/vimfiles/bundle/')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'airblade/vim-gitgutter'

Plugin 'flazz/vim-colorschemes'

"delimitMate 成对生成(),{},[]
Plugin 'Raimondi/delimitMate.git'


"YouComplete
Plugin 'Valloric/YouCompleteMe'
"Plugin 'file://D:/tools/program/gvim/Vim/ycm/YouCompleteMe'

Plugin 'scrooloose/nerdtree'
Plugin 'vim-syntastic/syntastic'

" Track the engine.
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

Plugin 'kien/ctrlp.vim'

"TAB键
"Plugin 'ervandew/supertab'

"自动补全插件
"Plugin 'Shougo/neocomplete.vim'

"在gvim中打开终端窗口
"Plugin 'vim-scripts/Conque-Shell'

"Plugin 'scrooloose/syntastic'

call vundle#end()            " required
filetype plugin indent on    " required

syntax on

"colorscheme monokai
"colorscheme mac_classic
colorscheme molokai
"set background=dark
"colorscheme jellybeans
"let g:solarized_termcolors= 256
"let g:solarized_contrast = "high"
"let g:solarized_visibility = "high"
"colorscheme solarized
"set background=light
set nu
set relativenumber number
set cursorline
set cursorcolumn
set ruler
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autochdir
set incsearch
set noerrorbells
set guioptions-=T
set guioptions-=m
set autoread
set hlsearch
set backspace=2
set cmdheight=2
set nowrap "不换行

"set guifont=monaco:h10
"set guifont=monaco:h10:b
"set guifont=hack:h11:b
"set guifont=hack:h11
set guifont=menlo:h10
"set guifont=Courier\ New:h11
"set guifont=inconsolataGo:h14

set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
if has("win32")
set fileencoding=chinese
else
set fileencoding=utf-8
endif
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"解决consle输出乱码
language messages zh_CN.utf-8

"有cscope_maps.vim
"if has("cscope")
"	set cscopetag
"	set csto=0
"
"	if filereadable("cscope.out")
"		cs add cscope.out
"	elseif $CSCOPE_DB != ""
"		cs add $CSCOPE_DB
"	endif
"
"	set cscopeverbose
"endif

"------------------------------------------------
"设置代码折叠
"zc 折叠
"zC 对所在范围内所有嵌套的折叠点进行折叠
"zo 展开折叠
"zO 对所在范围内所有嵌套的折叠点展开
"[z 到当前打开的折叠的开始处。
"]z 到当前打开的折叠的末尾处。
"zj 向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
"zk 向上移动到前一折叠的结束处。关闭的折叠也被计入。
"zR 打开所有折叠
"zM 关闭所有折叠
"set foldmethod=indent
"打开文件是默认不折叠代码
"et foldlevelstart=99
"空格开关折叠
"noremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

"------------------------------------------------

"airline
"let g:airline_theme='solarized'
"这个是安装字体后 必须设置此项" 
"let g:airline_powerline_fonts = 1
" 关闭状态显示空白符号计数,这个对我用处不大"
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

"NerdTree {
 autocmd StdinReadPre * let s:std_in=1
 autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

 let NERDTreeWinPos = "left"
 autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

 "autocmd vimenter * NERDTree " 默认打开并进入右侧工作区
 "wincmd w
 "autocmd VimEnter * wincmd w

 map <F4> :silent! NERDTreeToggle<CR>

"}

"delimitMate Settings{
let loadad_delimitMate = 1
au FileType mail let b:loaded_delimitMate = 1
let delimitMate_matchpairs = "(:),[:],{:},<:>"
au FileType vim,html let b:delimitMate_matchpairs = "(:),[:],{:},<:>"
"}

"superTab Settings {
"}

"YouComplete Settings {
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
" 补全功能在注释中同样有效  
let g:ycm_complete_in_comments=1
"允许 vim 加载 .ycm_extra_conf.py 文件，不再提示  
let g:ycm_confirm_extra_conf=0
let g:ycm_global_ycm_extra_conf='D:/tools/program/gvim/Vim/.ycm_extra_conf.py'
"let g:ycm_python_binary_path = 'python'
let g:syntastic_always_populate_loc_list = 1 "更好的使用syntastic
"}


"ctrlp Settings {
let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_match_window = 'top,order:btt,min:1,max:10,results:20'
"}

"syntastic Settings {
let g:syntastic_error_symbol = '✗' "set error or warning signs
let g:syntastic_warning_symbol = '!'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"}

"UltiSnips Settings {
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"}
